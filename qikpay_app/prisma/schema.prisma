generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId String  @unique
  amount Int
  locked Int
  User   User @relation(fields: [userId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  User      User         @relation(fields: [userId], references: [id])
}

model P2Ptransaction {
  id                                   Int      @id @default(autoincrement())
  amount                               Int
  timestamp                            DateTime
  fromUserId                           String
  toUserId                             String
  User_P2Ptransaction_fromUserIdToUser User     @relation("P2Ptransaction_fromUserIdToUser", fields: [fromUserId], references: [id])
  User_P2Ptransaction_toUserIdToUser   User     @relation("P2Ptransaction_toUserIdToUser", fields: [toUserId], references: [id])
}

model User {
  id                                             String                @id @default(cuid())
  email                                          String?             @unique
  name                                           String?
  password                                       String?
  image                                          String?
  Balance                                        Balance?
  OnRampTransaction                              OnRampTransaction[]
  P2Ptransaction_P2Ptransaction_fromUserIdToUser P2Ptransaction[]    @relation("P2Ptransaction_fromUserIdToUser")
  P2Ptransaction_P2Ptransaction_toUserIdToUser   P2Ptransaction[]    @relation("P2Ptransaction_toUserIdToUser")
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
